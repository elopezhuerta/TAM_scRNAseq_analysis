pw.wlx <-dfdf %>%
group_by(Module) %>%
wilcox_test(data =., ES ~ Parameter) %>%
adjust_pvalue(method = "bonferroni") %>%
add_significance("p.adj")
#Guardando
wlx.list[[i]]<-pw.wlx
WLX<-pw.wlx[pw.wlx$p.adj<0.01,]
#Posicion de la barra
stat.test <- WLX %>%
add_xy_position(x = "Module",
#Espacio entre lineas de significancia
step.increase = 0.1)
#GRAFICA
bigotes<-ggboxplot(dfdf, x = "Module", y = "ES",fill = "Parameter",color = "Black")+
#Resetea el fondo del grafico
theme_classic()+
#Texto dentro de cuadros
ylab("log10 (% of tumor)")+
labs(title = PARAMETRO[i])+
ylim(min(dfdf$ES),max(dfdf$ES)+0.8)+
theme(legend.title = element_blank(),
#Estilo de los paneles
panel.border = element_rect(fill=NA),
axis.title = element_text(face = "bold",size = 11,family = "serif"),
axis.ticks.x = element_blank(),
axis.title.x = element_blank(),
axis.text.x = element_text(angle = 30, hjust = 1,vjust = 1),
plot.title = element_text(face = "bold",size = 13,hjust = 0.5,
family = "serif", colour = "red"))
#ANADIENDO SIGNIFICATIVOS A GRAFICA
plot_list[[i]]<-bigotes+
#A?adiendo los valores significativos como *. Sin corchete.
stat_pvalue_manual(stat.test,  label = "p.adj.signif", tip.length = 0,
label.size = 2.3)
}
cowplot::plot_grid(plot_list[[1]], plot_list[[2]], NULL,
labels = c("a","b","c"), label_size = 16,
ncol = 2,
rel_heights = c(1,0.6))
CajasParam<-cowplot::plot_grid(plot_list[[1]], plot_list[[2]], NULL,
labels = c("a","b","c"), label_size = 16,
ncol = 2,
rel_heights = c(1,0.6))
#
#%%%: SURVIVAL HIGH/LOW####
#Seleccionar los >2% de cada poblacion
#bg<-c("FCN1","C1QA","CXCR4","ISG15","HLA_II", "SPP1")
bg<-c("FCN1","ISG15","Mono CXCR4","Tissue CXCR4","Tissue HLA_II","Mono HLA_II","C1QA","SPP1","CXCL9")
HP<-list()
for (i in 1:length(bg)) {
boslog<-bosque[,grep(bg[i],colnames(bosque))]>3
HP[[i]]<-bosque$patient[boslog]
}
#
#%%%: HAZARD RATIO####
library(survival)
#Uniendo datos de abundancia con supervivencia
p.thetam<-tibble::rownames_to_column(as.data.frame(thetam), var = "patient")
bosque<-dplyr::left_join(clinical_ready,p.thetam,by="patient")
HP<-list()
for (i in 1:length(bg)) {
boslog<-bosque[,grep(bg[i],colnames(bosque))]>3
HP[[i]]<-bosque$patient[boslog]
}
names(HP)<-bg
library(venn)
HIGH_venn<-venn(HP)
bosque
bosque
quantile(bosque$C1QA)
quantile(bosque$C1QA, na.rm = T)
quantile(bosque$SPP1, na.rm = T)
quantile(bosque$CXCL9, na.rm = T)
HP<-list()
for (i in 1:length(bg)) {
boslog<-bosque[,grep(bg[i],colnames(bosque))]>0.5
HP[[i]]<-bosque$patient[boslog]
}
names(HP)<-bg
library(venn)
HIGH_venn<-venn(HP)
#Extrayendo interseccion con funcion attribute
HIGH_inter<-attr(x = HIGH_venn, "intersections")
head(bosque)
#
#%%%: SURVIVAL HIGH/LOW####
#Seleccionar los >2% de cada poblacion
H_CXCL9<-bosque$CXCL9>0.5
H_C1QA<-bosque$C1QA>0.5
H_HLA<-bosque$`Tissue HLA_II`>0.5
length(H_CXCL9)
length(H_C1QA)
theta
thetam
#
#%%%: SURVIVAL HIGH/LOW####
#Seleccionar los >2% de cada poblacion
H_CXCL9<-rownames(bosque)[bosque$CXCL9>0.5]
H_C1QA<-rownames(bosque)[bosque$C1QA>0.5]
H_HLA<-rownames(bosque)[bosque$`Tissue HLA_II`>0.5]
H_CXCL9
H_C1QA
H_HLA
bosque$`Tissue HLA_II`[183]
rownames(bosque)[183]
head(bosque)
H_HLA<-bosque$patient[bosque$`Tissue HLA_II`>0.5]
H_HLA
bosque[58]
bosque[58,]
#bg<-c("FCN1","C1QA","CXCR4","ISG15","HLA_II", "SPP1")
bg<-c("Tissue HLA_II","C1QA","CXCL9")
HP<-list()
for (i in 1:length(bg)) {
boslog<-bosque[,grep(bg[i],colnames(bosque))]>0.5
HP[[i]]<-bosque$patient[boslog]
}
names(HP)<-bg
library(venn)
HIGH_venn<-venn(HP)
boslog<-bosque[,grep(bg[1],colnames(bosque))]>0.5
bosque$patient[boslog]
#Extrayendo interseccion con funcion attribute
HIGH_inter<-attr(x = HIGH_venn, "intersections")
bosqueDF<-bosque[,c("Months","Evento")]
bosque$Abundance<-ifelse(bosque$patient%in%HIGH_inter$CXCL9,
"H_CXCL9",
ifelse(bosque$patient%in%HIGH_inter$C1QA,
"H_C1QA",
ifelse(bosque$patient%in%HIGH_inter$`Tissue HLA_II`,
"H_HLA",
NA)))
head(bosqueDF)
tail(bosqueDF)
bosque
bosqueDF<-bosque[,c("Months","Evento","Abundance")]
head(bosqueDF)
tail(bosqueDF)
bosque$Abundance<-ifelse(bosque$patient%in%HIGH_inter$CXCL9,
"H_CXCL9",
ifelse(bosque$patient%in%HIGH_inter$C1QA,
"H_C1QA",
ifelse(bosque$patient%in%HIGH_inter$`Tissue HLA_II`,
"H_HLA",
NA)))
bosqueDF<-bosque[,c("Months","Evento","Abundance")]
table(bosqueDF$Months)
#Quitando NA de evento
km<-bosqueDF[!is.na(bosqueDF$Evento)|!is.na(bosqueDF$Abundance),]
head(km)
#Quitando NA de evento
km<-bosqueDF[!is.na(bosqueDF$Evento)&!is.na(bosqueDF$Abundance),]
km
#Survival analisis
a.km <- survfit(Surv(as.numeric(Months), Evento) ~ Abundance, data = km, type = "kaplan-meier")
#Para obtener median survival
#surv_median(a.km)
library(survminer)
ggsurvplot(fit=a.km, data = km, palette = c("red","blue","blue"),
conf.int=FALSE, pval=T, surv.median.line = "none",break.x.by=50,
risk.table = "nrisk_cumevents",
risk.table.y.text.col = T, # colour risk table text annotations.
risk.table.y.text = FALSE,
legend.title=element_blank(),xlab = NULL,ylab = NULL)
ggsurvplot(fit=a.km, data = km,
#palette = c("red","blue","blue"),
conf.int=FALSE, pval=T, surv.median.line = "none",break.x.by=50,
risk.table = "nrisk_cumevents",
risk.table.y.text.col = T, # colour risk table text annotations.
risk.table.y.text = FALSE,
legend.title=element_blank(),xlab = NULL,ylab = NULL)
#
#%%%: SURVIVAL HIGH/LOW####
#Seleccionar los >2% de cada poblacion
#bg<-c("FCN1","C1QA","CXCR4","ISG15","HLA_II", "SPP1")
bg<-c("Mono HLA_II","C1QA","CXCL9")
HP<-list()
for (i in 1:length(bg)) {
boslog<-bosque[,grep(bg[i],colnames(bosque))]>0.5
HP[[i]]<-bosque$patient[boslog]
}
names(HP)<-bg
library(venn)
HIGH_venn<-venn(HP)
#Extrayendo interseccion con funcion attribute
HIGH_inter<-attr(x = HIGH_venn, "intersections")
bosque$Abundance<-ifelse(bosque$patient%in%HIGH_inter$CXCL9,
"H_CXCL9",
ifelse(bosque$patient%in%HIGH_inter$C1QA,
"H_C1QA",
ifelse(bosque$patient%in%HIGH_inter$`Mono HLA_II`,
"H_HLA",
NA)))
bosqueDF<-bosque[,c("Months","Evento","Abundance")]
#Quitando NA de evento
km<-bosqueDF[!is.na(bosqueDF$Evento)&!is.na(bosqueDF$Abundance),]
#Survival analisis
a.km <- survfit(Surv(as.numeric(Months), Evento) ~ Abundance, data = km, type = "kaplan-meier")
#Para obtener median survival
#surv_median(a.km)
library(survminer)
ggsurvplot(fit=a.km, data = km, palette = c("red","blue","blue"),
conf.int=FALSE, pval=T, surv.median.line = "none",break.x.by=50,
risk.table = "nrisk_cumevents",
risk.table.y.text.col = T, # colour risk table text annotations.
risk.table.y.text = FALSE,
legend.title=element_blank(),xlab = NULL,ylab = NULL)
ggsurvplot(fit=a.km, data = km, palette = c("red","blue","lightblue"),
conf.int=FALSE, pval=T, surv.median.line = "none",break.x.by=50,
risk.table = "nrisk_cumevents",
risk.table.y.text.col = T, # colour risk table text annotations.
risk.table.y.text = FALSE,
legend.title=element_blank(),xlab = NULL,ylab = NULL)
HP<-list()
for (i in 1:length(bg)) {
if(bg=="Mono HLA_II"){
limit<-0.1
}else{
limit<-0.5
}
boslog<-bosque[,grep(bg[i],colnames(bosque))]>limit
HP[[i]]<-bosque$patient[boslog]
}
HP<-list()
for (i in 1:length(bg)) {
if(bg[i]=="Mono HLA_II"){
limit<-0.1
}else{
limit<-0.5
}
boslog<-bosque[,grep(bg[i],colnames(bosque))]>limit
HP[[i]]<-bosque$patient[boslog]
}
names(HP)<-bg
library(venn)
HIGH_venn<-venn(HP)
names(HP)<-bg
HIGH_venn<-venn(HP)
#Extrayendo interseccion con funcion attribute
HIGH_inter<-attr(x = HIGH_venn, "intersections")
bosque$Abundance<-ifelse(bosque$patient%in%HIGH_inter$CXCL9,
"H_CXCL9",
ifelse(bosque$patient%in%HIGH_inter$C1QA,
"H_C1QA",
ifelse(bosque$patient%in%HIGH_inter$`Mono HLA_II`,
"H_HLA",
NA)))
bosqueDF<-bosque[,c("Months","Evento","Abundance")]
#Quitando NA de evento
km<-bosqueDF[!is.na(bosqueDF$Evento)&!is.na(bosqueDF$Abundance),]
#Survival analisis
a.km <- survfit(Surv(as.numeric(Months), Evento) ~ Abundance, data = km, type = "kaplan-meier")
#Para obtener median survival
#surv_median(a.km)
library(survminer)
ggsurvplot(fit=a.km, data = km, palette = c("red","blue","lightblue"),
conf.int=FALSE, pval=T, surv.median.line = "none",break.x.by=50,
risk.table = "nrisk_cumevents",
risk.table.y.text.col = T, # colour risk table text annotations.
risk.table.y.text = FALSE,
legend.title=element_blank(),xlab = NULL,ylab = NULL)
#Verificar que realmente son high y low
aber<-thetam[thetam$patient%in%c(HIGH_inter$SPP1,HIGH_inter$ISG15,LPat),]
Wu2021<-readRDS(file = "D:/R_ScriptsPaper/Objects/Wu_BRCA_Refined.rds")
Wu2021<-readRDS(file = "D:/R_ScriptsPaper/Objects/WuBRCA_Refined.rds")
dim(Wu2021)
WuTAMs<-readRDS(file = "D:/R_ScriptsPaper/Objects/WuTAMS.rds")
dim(WuTAMs)
WuTAMs<-readRDS(file = "D:/R_Scripts/EssentialObjects/TAM_modules.rds")
dim(WuTAMs)
library(ggplot2)
library(stringr)
library(dplyr)
#Datos clinicos
clinical_ready<-readRDS(file = "D:/R_Scripts/EssentialObjects/clinical_ready.rds")
theta<-readRDS(file = "F:/Gut Breaker/BayesPrism/Wu_HSPs/theta.rds")
head(theta)
#% format
theta<-theta*100
quantile(theta[,21])
#Log10 scale
L100theta<-log10(theta)
grep(paste(c("CXCR4","HLA_II","ISG15",
"CXCL9","C1QA","SPP1","FCN1"),collapse = "|"),
colnames(theta), value = TRUE)
#Determining populations of interest
pops <- grep(paste(c("FCN1","ISG15","CXCL9","FOSB","HLA_II",
"C1QA","APOE",),collapse = "|"),
colnames(theta), value = TRUE)
#Determining populations of interest
pops <- grep(paste(c("FCN1","ISG15","CXCL9","FOSB","HLA_II",
"C1QA","APOE"),collapse = "|"),
colnames(theta), value = TRUE)
pops
colnames(theta)
colnames(theta)[grepl(paste(c("FCN1","ISG15","CXCL9","FOSB","HSPs","HLA_II",
"C1QA","APOE"),collapse = "|")]
colnames(theta)[grepl(paste(c("FCN1","ISG15","CXCL9","FOSB","HSPs","HLA_II","C1QA","APOE"),collapse = "|")]
colnames(theta)[grepl(paste(c("FCN1","ISG15","CXCL9","FOSB","HSPs","HLA_II","C1QA","APOE"),collapse = "|")]
colnames(theta)[grepl(paste(c("FCN1","ISG15","CXCL9","FOSB","HSPs","HLA_II","C1QA","APOE"),collapse = "|"),colnames(theta)]
colnames(theta)[grepl(paste(c("FCN1","ISG15","CXCL9","FOSB","HSPs","HLA_II","C1QA","APOE"),collapse = "|",colnames(theta))]
paste(c("FCN1","ISG15","CXCL9","FOSB","HSPs","HLA_II","C1QA","APOE"),collapse = "|")
grepl(paste(c("FCN1","ISG15","CXCL9","FOSB","HSPs","HLA_II","C1QA","APOE"),collapse = "|"), colnames(theta))
colnames(theta)[grepl(paste(c("FCN1","ISG15","CXCL9","FOSB","HSPs","HLA_II","C1QA","APOE"),collapse = "|"), colnames(theta))]
grep(paste(c("FCN1","ISG15","CXCL9","FOSB","HSPs","HLA_II",
"C1QA","APOE"),collapse = "|"),
colnames(theta))
#Determining populations of interest
pops <- grep(paste(c("FCN1","ISG15","CXCL9","FOSB","HSPs","HLA_II",
"C1QA","APOE"),collapse = "|"),
colnames(theta), value = TRUE)
#Subsetting TAM results (% scale)
thetam<-theta[,pops]
#Subsetting TAM with log10 scale
TAMlog10<-L100theta[,pops]
head(thetam)
#
#%%%: HAZARD RATIO####
library(survival)
#Uniendo datos de abundancia con supervivencia
p.thetam<-tibble::rownames_to_column(as.data.frame(thetam), var = "patient")
bosque<-dplyr::left_join(clinical_ready,p.thetam,by="patient")
#Solo las columnas deseadas (No es necesario el procesamiento del CLINICAL ASSOCIATIONS)
km<-bosque[,c("Months","Evento",pops)]
#Quitando NA de evento
km<-km[!is.na(km$Evento),]
#Cox model de todas las poblaciones
overall_TAM <- coxph(Surv(Months, Evento) ~ FCN1 + ISG15+CXCL9+FOSB+HSPs+
HLA_II+C1QA+APOE, data = km)
# Create a forest plot of the Cox model
survminer::ggforest(overall_TAM, data = km)
coxph(Surv(Months, Evento) ~ FCN1 + ISG15+CXCL9+FOSB+
HLA_II+C1QA+APOE, data = km)
overall_TAM<-coxph(Surv(Months, Evento) ~ FCN1 + ISG15+CXCL9+FOSB+
HLA_II+C1QA+APOE, data = km)
# Create a forest plot of the Cox model
survminer::ggforest(overall_TAM, data = km)
bosque
head(bosque)
bg<-c("HLA_II","C1QA","CXCL9","FOSB","HSPs")
HP<-list()
for (i in 1:length(bg)) {
if(bg[i]=="HLA_II"){
limit<-0.1
}else{
limit<-0.5
}
boslog<-bosque[,grep(bg[i],colnames(bosque))]>limit
HP[[i]]<-bosque$patient[boslog]
}
names(HP)<-bg
str(HP)
head(bosque)
quantile(bosque$HSPs)
quantile(bosque$HSPs, na.rm = T)
bg<-c("HLA_II","C1QA","CXCL9","FOSB","HSPs")
HP<-list()
for (i in 1:length(bg)) {
if(bg[i]=="HLA_II"){
limit<-0.1
}else{
limit<-0.5
}
boslog<-bosque[,grep(bg[i],colnames(bosque))]>limit
HP[[i]]<-bosque$patient[boslog]
}
names(HP)<-bg
str(HP)
bg<-c("HLA_II","C1QA","CXCL9","FOSB","HSPs")
HP<-list()
bg
bg[5]
i<-5
if(bg[i]=="HLA_II"){
limit<-0.1
}else{
limit<-0.5
}
bosque[,grep(bg[i],colnames(bosque))]>limit
bosque[,grep(bg[i],colnames(bosque))]
table(is.na(bosque$HSPs))
bosque[!is.na(bosque$HSPs),]
bosque[is.na(bosque$HSPs),]
str(HP)
table(bosque[,grep(bg[i],colnames(bosque))]>limit)
bosque[,grep(bg[i],colnames(bosque))]>limit
bosque[bosque[,grep(bg[i],colnames(bosque))]>limit,]
quantile(bosque$HSPs, na.rm = T)
?quantile
quantile(bosque$HSPs, na.rm = T, probs = seq(.5,1,0.1))
quantile(bosque$HSPs, na.rm = T, probs = seq(.5,1,0.05))
quantile(bosque$HLA_II, na.rm = T, probs = seq(.5,1,0.05))
quantile(bosque$HLA_II, na.rm = T, probs = seq(.8,1,0.01))
for (j in seq_along(bg)) {
print(table(is.na(bosque[,bg[j]])))
}
# ============================================================================
# Section 2: SURVIVAL CURVES
# ============================================================================
# Selecting patients with abundance >2% for population of interest
bg<-c("HLA_II","C1QA","CXCL9","FOSB","HSPs")
HP<-list()
for (i in 1:length(bg)) {
if(bg[i]=="HLA_II"){
limit<-0.1
}else{
limit<-0.5
}
#First remove NA for the respective column
cleaned_df <- bosque[is.na(bosque[,bg[i]]),]
#Select patients above the limit
boslog <- cleaned_df[,grep(bg[i],colnames(cleaned_df))]>limit
HP[[i]] <- cleaned_df$patient[boslog]
}
names(HP)<-bg
str(HP)
HP<-list()
for (i in 1:length(bg)) {
if(bg[i]=="HLA_II"){
limit<-0.1
}else{
limit<-0.5
}
#First remove NA for the respective column
cleaned_df <- bosque[!is.na(bosque[,bg[i]]),]
#Select patients above the limit
boslog <- cleaned_df[,grep(bg[i],colnames(cleaned_df))]>limit
HP[[i]] <- cleaned_df$patient[boslog]
}
names(HP)<-bg
str(HP)
library(venn)
HIGH_venn<-venn(HP)
#Extrayendo interseccion con funcion attribute
HIGH_inter<-attr(x = HIGH_venn, "intersections")
# ============================================================================
# Section 2: SURVIVAL CURVES
# ============================================================================
# Selecting patients with abundance >2% for population of interest
bg<-c("HLA_II","C1QA","CXCL9","FOSB")
HP<-list()
for (i in 1:length(bg)) {
if(bg[i]=="HLA_II"){
limit<-0.1
}else{
limit<-0.5
}
#First remove NA for the respective column
cleaned_df <- bosque[!is.na(bosque[,bg[i]]),]
#Select patients above the limit
boslog <- cleaned_df[,grep(bg[i],colnames(cleaned_df))]>limit
HP[[i]] <- cleaned_df$patient[boslog]
}
names(HP)<-bg
HIGH_venn<-venn(HP)
#Extrayendo interseccion con funcion attribute
HIGH_inter<-attr(x = HIGH_venn, "intersections")
str(HIGH_inter)
head(bosque)
# List of specified genes
genes <- c("APOE", "CXCL9", "HLA_II", "FOSB")
# Extract patient IDs for each gene and create a named vector
named_vector <- unlist(lapply(genes, function(gene) setNames(HIGH_inter[[gene]], gene)))
# List of specified genes
genes <- c("APOE", "CXCL9", "HLA_II", "FOSB")
# Extract patient IDs for each gene and create a named vector
named_vector <- unlist(lapply(genes, function(gene) setNames(HIGH_inter[[gene]], gene)))
# Assigning label to patients enroched with only 1 population
bosque$Abundance<-ifelse(bosque$patient%in%HIGH_inter$CXCL9,
"H_CXCL9",
ifelse(bosque$patient%in%HIGH_inter$C1QA,
"H_C1QA",
ifelse(bosque$patient%in%HIGH_inter$`Mono HLA_II`,
"H_HLA",
NA)))
bosqueDF<-bosque[,c("Months","Evento","Abundance")]
#Quitando NA de evento
km<-bosqueDF[!is.na(bosqueDF$Evento)&!is.na(bosqueDF$Abundance),]
#Survival analisis
a.km <- survfit(Surv(as.numeric(Months), Evento) ~ Abundance, data = km, type = "kaplan-meier")
#Para obtener median survival
#surv_median(a.km)
library(survminer)
ggsurvplot(fit=a.km, data = km, palette = c("red","blue","lightblue"),
conf.int=FALSE, pval=T, surv.median.line = "none",break.x.by=50,
risk.table = "nrisk_cumevents",
risk.table.y.text.col = T, # colour risk table text annotations.
risk.table.y.text = FALSE,
legend.title=element_blank(),xlab = NULL,ylab = NULL)
# Assigning label to patients enroched with only 1 population
bosque$Abundance<-ifelse(bosque$patient%in%HIGH_inter$CXCL9,
"H_CXCL9",
ifelse(bosque$patient%in%HIGH_inter$C1QA,
"H_C1QA",
ifelse(bosque$patient%in%HIGH_inter$HLA_II,
"H_HLA",
NA)))
bosqueDF<-bosque[,c("Months","Evento","Abundance")]
#Quitando NA de evento
km<-bosqueDF[!is.na(bosqueDF$Evento)&!is.na(bosqueDF$Abundance),]
#Survival analisis
a.km <- survfit(Surv(as.numeric(Months), Evento) ~ Abundance, data = km, type = "kaplan-meier")
#Para obtener median survival
#surv_median(a.km)
library(survminer)
ggsurvplot(fit=a.km, data = km, palette = c("red","blue","lightblue"),
conf.int=FALSE, pval=T, surv.median.line = "none",break.x.by=50,
risk.table = "nrisk_cumevents",
risk.table.y.text.col = T, # colour risk table text annotations.
risk.table.y.text = FALSE,
legend.title=element_blank(),xlab = NULL,ylab = NULL)
