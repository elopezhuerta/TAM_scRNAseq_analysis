vln_list[[ii]]<-VlnPlot(Infilt_scores, features = scores[ii], pt.size=0)+
NoLegend() +
# Order in X
scale_x_discrete(limits=xOrder)+
labs(title = scores_aes[ii])+
ylab("Enrichment score")+
# More limit to add significant comparisons
ylim(-1.1,1.3)+
theme(axis.text.y = element_text(size = rel(0.7)),
axis.text.x = element_text(size = rel(0.8)),
#El texto horizontal
axis.title.y = element_text(size = rel(0.8)),
axis.title.x = element_blank(),
plot.title = element_text(size = rel(0.8), family = "serif"),
# Reduce space between plots
plot.margin=unit(c(-0.5,-0.5,-0.5,0.5), "cm"))+
# Add point at median
stat_summary(fun = median.stat, geom='point', size = 1, colour = "black")
print(paste("Loop",ii, sep = " "))
}
# Plot array
ggpubr::ggarrange(plotlist = vln_list, ncol=3, nrow = 3)
# Display significant comparisons
print(ns.comparisons)
# ES in TME
Infilt_scores<-readRDS(file="D:/R_ScriptsPaper/Objects/Temporal/Infilt_scores_HSP_Azizi.rds")
table(Idents(Infilt_scores))
table(Infilt_scores$orig.ident)
dim(Infilt_scores)
#Remove Blood and NTMT
Infilt_scores<-Infilt_scores[,!grepl("BLOOD|NORMAL",Infilt_scores$orig.ident)]
dim(Infilt_scores)
# Aesthetic
scores<-colnames(Infilt_scores@meta.data)[grep("score",colnames(Infilt_scores@meta.data))]
scores_aes <- stringr::str_replace_all(scores,"_"," ")
# Loading object with TAM identity
TAM_Modules <- readRDS(file = "D:/R_ScriptsPaper/Objects/Temporal/TAM_Modules_HSP.rds")
# Only most polarized states
Poles<-subset(TAM_Modules,idents = single.modules)
# Replacing TAM identities
Infilt_scores<-SetIdent(Infilt_scores, cells = names(Poles$Modules),
value = paste("TAM",as.character(Poles$Modules),sep = "_"))
table(Idents(Infilt_scores))
# Removing remaining TAMs
Infilt_scores<-subset(Infilt_scores, idents = c("TAMs"), invert=T)
# Identities should be the same as celltypes
Idents(Infilt_scores)<-stringr::str_replace_all(as.character(Idents(Infilt_scores)),"_II","-II")
Infilt_scores$celltypes<-Idents(Infilt_scores)
dev.off()
#
# ============================================================================
# SHAPIRO TEST (NORMALITY TEST)
# ============================================================================
# Test by score per cell type
TME_scores<-dplyr::group_split(Infilt_scores@meta.data[,c("celltypes",scores)], celltypes)
# Create a df indicating normality for each cell type per score
for (ii in seq_along(TME_scores)) {
print(ii)
DFL<-TME_scores[[ii]]
#If cell type is > 5k, make sample because 5k is limit for shapiro test
if (nrow(DFL)>5000) {
DFL <- DFL[sample(nrow(DFL), 5000), ]
}
#Test for each module signature, while removing celltype column
shapiro_results <- apply(DFL[,-1], 2, shapiro.test)
# Pval for each score
shap_res<-vector()
for (jj in 1:ncol(DFL[,-1])) {
# If pval<0.05, data is not normally distributed
shap_res[jj]<-shapiro_results[[jj]]$p.value>0.05
}
result_df<-data.frame(names(shapiro_results),shap_res)
colnames(result_df)<-c(as.character(unique(DFL$celltypes)),"Normal_distribution")
print(result_df)
}
#
# ============================================================================
# KRUSKAL-WALLIS
# ============================================================================
library(dplyr)
library(ggpubr)
library(FSA)  # For Dunn's Test
# Were to store Dunn results
ns.comparisons<-list()
for (ii in seq_along(scores)) {
# Create a df with only the desired column
df<-Infilt_scores@meta.data[,c("celltypes",scores[ii])]
# Homogenize names
colnames(df)<-c("celltypes","ES")
# Perform the Kruskal-Wallis Test
kruskal_test <- kruskal.test(ES ~ celltypes, data = df)
# If the Kruskal-Wallis test is significant, perform Dunn's Test for post-hoc analysis
if (kruskal_test$p.value < 0.05) {
dunn_test <- dunnTest(ES ~ celltypes, data = df, method = "bonferroni")
dunn_res<-dunn_test$res
# Rows were single.modules[ii] appear only once
logic_vector<-grepl(single.modules[ii], dunn_res$Comparison)
# Display only ns differences involving the respective TAM population
ns.pair<-dunn_res$Comparison[logic_vector&dunn_res$P.adj>0.01]
ns.comparisons[[ii]]<-ns.pair
} else {
print(paste0("Kruskal-Wallis test was n.s.; no post-hoc test is performed for ",scores[ii]))
}
}
# Summary of n.s. comparison with the respective population (single.modules[ii])
names(ns.comparisons)<-scores
#
# ============================================================================
# VIOLIN PLOTS
# ============================================================================
library(ggplot2)
#Funcion para marcar punto medio del violin
median.stat <- function(x){
out <- quantile(x, probs = c(0.5))
names(out) <- c("ymed")
return(out)
}
# Were to store violin plots
vln_list<-list()
#Sorting by median in accordance with violin plots
obj.list <- SplitObject(Infilt_scores, split.by = "ident")
#Loop for every score
for (ii in seq_along(scores)) {
median_list<-vector()
# One loop per cell type
for (jj in seq_along(obj.list)){
#Calculate median for each gene
Q2<-as.numeric(quantile(obj.list[[jj]]@meta.data[,scores[ii]])["50%"])
#Each member of the list contains a vector of every median for every gene
median_list[jj]<-Q2
}
#Convert list into dataframe
names(median_list)<-names(obj.list)
# Sort by median
xOrder<-names(sort(median_list, decreasing = T))
#-----PLOT---
vln_list[[ii]]<-VlnPlot(Infilt_scores, features = scores[ii], pt.size=0)+
NoLegend() +
# Order in X
scale_x_discrete(limits=xOrder)+
labs(title = scores_aes[ii])+
ylab("Enrichment score")+
# More limit to add significant comparisons
ylim(-1.1,1.3)+
theme(axis.text.y = element_text(size = rel(0.7)),
axis.text.x = element_text(size = rel(0.8)),
#El texto horizontal
axis.title.y = element_text(size = rel(0.8)),
axis.title.x = element_blank(),
plot.title = element_text(size = rel(0.8), family = "serif"),
# Reduce space between plots
plot.margin=unit(c(-0.5,-0.5,-0.5,0.5), "cm"))+
# Add point at median
stat_summary(fun = median.stat, geom='point', size = 1, colour = "black")
print(paste("Loop",ii, sep = " "))
}
# Plot array
ggpubr::ggarrange(plotlist = vln_list, ncol=3, nrow = 3)
# Display significant comparisons
print(ns.comparisons)
AziziAnnotated<-readRDS(file = "D:/R_ScritpsPaper/Objects/AziziAnnotated.rds")
AziziAnnotated<-readRDS(file = "D:/R_ScritpsPaper/Objects/AzziAnnotated.rds")
Infilt<-readRDS(file = "D:/R_ScriptsPaper/Objects/AzziBRCA_Refined.rds")
dim(AzziBRCA_Refined)
dim(Infilt)
dim(Infilt_scores)
table(Idents(Infilt))
# Display significant comparisons
print(ns.comparisons)
head(Infilt)
DimPlot(Infilt, label = T)+NoLegend()
Annotated<-Infilt
#Save object with refined identities
#saveRDS(Annotated, file = "D:/R_ScriptsPaper/Objects/AzziAnnotated.rds")
#
# ============================================================================
# Section 3: Visualization
# ============================================================================
library(ggplot2)
library(cowplot)
#Plot batch-corrected samples
p.type<-DimPlot(Annotated, reduction = "umap",group.by = "celltypes")+
labs(title = "SingleR")+
theme(axis.title = element_text(size = rel(0.6)),
axis.text = element_text(size = rel(0.6)),
legend.position = "bottom")
#Plot clustering
p.cl<-DimPlot(Annotated, reduction = "umap",label = T,group.by = "seurat_clusters")+
labs(title = "Clustering")+
theme(axis.title = element_text(size = rel(0.6)),
axis.text = element_text(size = rel(0.6)))+
NoLegend()
# Manually refined annotation
# Use palette of discrette colors
Disc.Pal<-DiscretePalette(length(unique(Annotated$Annotation)),shuffle = T)
p.annot<-DimPlot(Annotated, reduction = "umap",label = F,
group.by = "Annotation",cols = Disc.Pal)+
labs(title = "Annotation")+
theme(axis.title = element_text(size = rel(0.6)),
axis.text = element_text(size = rel(0.6)))
#All 3 plots
p.type+p.cl+p.annot
#Final annotation (DotPlot)
AllMarkers<-c("CD3D","CD3E",
"CD8A",
"CD4","IL7R",
"FOXP3","CTLA4",
"NKG7","KLRD1",
"MS4A1","CD19",
"CD68","CD14","FCGR3A",
"CLEC9A","CD1C","FCER1A","LAMP3", #DC populations
"FCGR3B","CXCR2", #Neutrophils
"TPSAB1","CPA3", # Mast cells
"CXCR3","LILRA4",
"COL1A1","DCN", #Fibroblast
"VWF","PECAM1", #Endothelial cells
"EPCAM","KRT19" #Epithelial_cells
)
#Order on Y axis
type.order<-c("T CD8","T CD4","T regs","NK cell","B cell",
"TAMs","Tissue macrophages","Blood monocytes","DC populations",
"Neutrophils","Mast cells","pDC",
"Fibroblasts",
"Endothelial cells","Epithelial cells")
DotPlot(Annotated, features = AllMarkers, assay = "RNA", cols = "Spectral")+
scale_y_discrete(limits=rev(type.order))+
theme(axis.text.x = element_text(angle = 30, hjust = 1, size = rel(0.8)),
axis.text.y = element_text(size = rel(0.8)),
axis.title = element_blank())
# Display significant comparisons
print(ns.comparisons)
dev.off()
# =============================================================================
# Name: BAYESPRISM-ANALYSIS OF ESTIMATED ABUNDANCE
# Author: elopez
# Date: 06-08-2024
# Description:
# TODO:
# ============================================================================
library(ggplot2)
library(stringr)
library(dplyr)
library(tidyr)
library(survival)
library(survminer)
#Abundance estimated by Bayes Prism
#BP.theta <- readRDS(file = "D:/R_ScriptsPaper/Objects/Temporal/BayesPrism/theta_MainPheno_HSP.rds")
BP.theta <- readRDS(file = "D:/R_ScriptsPaper/Objects/Temporal/BayesPrism/theta_Polos.rds")
# Population selection/order
TAM_pops<-c("FCN1","ISG15","CXCL9","FOSB","HSPs","HLA_II","C1QA","APOE")
# % format
BP.theta<-BP.theta*100
# Determining populations of interest
TAM_stringpattern <- grep(paste(TAM_pops,collapse = "|"),
colnames(BP.theta), value = TRUE)
#Subsetting TAM results (% scale)
TAM_estimation<-BP.theta[,TAM_stringpattern]
#Subsetting TAM with log10 scale of 100%
TAM_log_scale<-log10(BP.theta[,TAM_stringpattern])
# CLEANING clinical dataframe
# Import clinical data
clinical_ready <- readRDS(file = "D:/R_Scripts/EssentialObjects/clinical_ready.rds")
# Choosing clinical parameter to analyze
All_Param<-c("PAM50_Subtype","Pathologic_stage","PR_Status","ER_Status","Her2_Status")
# Check variables to clean
apply(clinical_ready[,All_Param], 2, table)
# Cleaning columns from clinical data
to_clean<-c("NA","Normal","[Discrepancy]","[Not Available]","[Not Evaluated]","Indeterminate","Equivocal")
for (i in seq_along(to_clean)) {
clinical_ready[All_Param][clinical_ready[All_Param]==to_clean[i]]<-NA
}
#
# ============================================================================
# Fig. S7A: BOXPLOT ALL POPULATION ABUNDANCES IN THE TME
# ============================================================================
#Median values
medians <- apply(BP.theta, 2, median)
sorted_medinas<-names(medians)[order(medians, decreasing = T)]
# Reshape the dataframe to long format
df_long <- reshape2::melt(BP.theta)
# Percentages in the TME
ggplot(df_long, aes(x = Var2, y = value)) +
geom_boxplot()+
#Orden eje x
theme_minimal()+
scale_x_discrete(limits=sorted_medinas)+
labs(title="Population abundance in TME")+
theme(axis.text.x = element_text(angle = 45,hjust=1, vjust=1),
axis.title = element_blank())
# Percentages in the TME
ggplot(df_long, aes(x = Var2, y = value)) +
geom_boxplot()+
#Orden eje x
theme_minimal()+
scale_x_discrete(limits=sorted_medinas)+
labs(title="Population abundance in TME")+
theme(axis.text.x = element_text(angle = 45,hjust=1, vjust=1),
axis.title = element_blank(),
panel.grid = element_blank(),
legend.position = "none")+  # Remove grid lines
scale_fill_brewer(palette = "Set3")
# Percentages in the TME
ggplot(df_long, aes(x = Var2, y = value, fill=Var2)) +
geom_boxplot()+
#Orden eje x
theme_minimal()+
scale_x_discrete(limits=sorted_medinas)+
labs(title="Population abundance in TME")+
theme(axis.text.x = element_text(angle = 45,hjust=1, vjust=1),
axis.title = element_blank(),
panel.grid = element_blank(),
legend.position = "none") +  # Remove grid lines
scale_fill_brewer(palette = "Set3")
ggplot(df_long, aes(x = Var2, y = value, fill = Var2)) +  # Specify 'fill' within aes()
geom_boxplot() +
theme_minimal() +
scale_x_discrete(limits = sorted_medinas) +
labs(title = "Population abundance in TME") +
theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1),
axis.title = element_blank(),
panel.grid = element_blank(),
legend.position = "none") +  # Remove legend box
scale_fill_brewer(palette = "Set3")  # Use a color palette from RColorBrewer
# Percentages in the TME
ggplot(df_long, aes(x = Var2, y = value, fill=Var2)) +
geom_boxplot()+
#Orden eje x
theme_minimal()+
scale_x_discrete(limits=sorted_medinas)+
labs(title="Population abundance in TME")+
theme(axis.text.x = element_text(angle = 45,hjust=1, vjust=1),
axis.title = element_blank(),
panel.grid = element_blank(),
legend.position = "none") +  # Remove grid lines
scale_fill_viridis_d()
# Percentages in the TME
ggplot(df_long, aes(x = Var2, y = value, fill=Var2)) +
geom_boxplot()+
#Orden eje x
theme_minimal()+
scale_x_discrete(limits=sorted_medinas)+
labs(title="Population abundance in TME")+
theme(axis.text.x = element_text(angle = 45,hjust=1, vjust=1),
axis.title = element_blank(),
panel.grid = element_blank(),
legend.position = "none") +  # Remove grid lines
scale_fill_brewer(palette = "Set3")
# Percentages in the TME
TME_estim_boxes<-ggplot(df_long, aes(x = Var2, y = value, fill=Var2)) +
geom_boxplot()+
#Orden eje x
theme_minimal()+
scale_x_discrete(limits=sorted_medinas)+
labs(title="Population abundance in TME")+
theme(axis.text.x = element_text(angle = 45,hjust=1, vjust=1),
axis.title = element_blank(),
panel.grid = element_blank(),
legend.position = "none") +  # Remove grid lines
scale_fill_brewer(palette = "Set3")
#
# ============================================================================
# Fig. S7B-C: TAM ABUNDANCES WITHIN PATIENTS
# ============================================================================
# Visualize co existance within patient
library(pheatmap)
library(gplots)
#Palette color
spectro<-RColorBrewer::brewer.pal(11, "Spectral")
# Aesthetic
TAM_est_DF<-TAM_estimation
colnames(TAM_est_DF)<-paste0("TAM_",colnames(TAM_est_DF))
# Heatmap of %
TAM_coex_patients<-pheatmap(t(TAM_est_DF), col=spectro, cluster_cols=T, cluster_rows=T,
fontsize_col=6, fontsize_row = 8,
border_color=NA,
show_colnames = F,
annotation_legend = F,
annotation_names_row = F)
TAM_coex_patients<-ggplotify::as.ggplot(TAM_coex_patients)
# Heatmap of %
TAM_coex_patients<-pheatmap(t(TAM_est_DF), col=rev(spectro), cluster_cols=T, cluster_rows=T,
fontsize_col=6, fontsize_row = 8,
border_color=NA,
show_colnames = F,
annotation_legend = F,
annotation_names_row = F)
TAM_coex_patients<-ggplotify::as.ggplot(TAM_coex_patients)
# ABUNDANCE (%) OF TAM POPS
Total_TAMs<-as.data.frame(TAM_estimation)
Total_TAMs$Total_TAM<-apply(Total_TAMs,1,sum)
# Median value
median_value <- apply(Total_TAMs, 2, median)
# Setting order by median_value
orden_abun<-names(median_value)[order(median_value, decreasing = T)]
# Format for plotting
gg_Total_TAMs<-reshape2::melt(Total_TAMs)
# Custom in X axis
original_labels <- unique(gg_Total_TAMs$variable)
paste0("TAM_",original_labels)
original_labels
ifelse(original_labels!="Total_TAM",
paste0("TAM_",original_labels),
original_labels)
ifelse(original_labels!="Total_TAM",
paste0("TAM_",original_labels),
as.character(original_labels))
# Paste TAM prefix, except for Total TAMs
new_labels <- ifelse(original_labels!="Total_TAM",
paste0("TAM_",original_labels),
as.character(original_labels))
# Create a named vector for new labels
xLabels <- setNames(new_labels, original_labels)
ggplot(gg_Total_TAMs, aes(x = variable, y = value, fill = variable)) +  # Add 'fill' to color the boxes
geom_boxplot() +
theme_minimal() +
scale_x_discrete(limits = orden_abun, labels = xLabels) +
ylab("Percentage within the TME") +
theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1),
axis.title.x = element_blank(),
panel.grid = element_blank(),
legend.position = "none") +  # Remove grid lines
scale_fill_brewer(palette = "Set3")
# ABUNDANCE (%) OF TAM POPS
Only_TAM_abun<-as.data.frame(TAM_estimation)
Only_TAM_abun$Total_TAMs<-apply(Only_TAM_abun,1,sum)
# Median value
median_value <- apply(Only_TAM_abun, 2, median)
# Setting order by median_value
orden_abun<-names(median_value)[order(median_value, decreasing = T)]
# Format for plotting
gg_Only_TAM_abun<-reshape2::melt(Only_TAM_abun)
# Custom in X axis
original_labels <- unique(gg_Only_TAM_abun$variable)
# Paste TAM prefix, except for Total TAMs
new_labels <- ifelse(original_labels!="Total_TAMs",
paste0("TAM_",original_labels),
as.character(original_labels))
# Create a named vector for new labels
xLabels <- setNames(new_labels, original_labels)
ggplot(gg_Only_TAM_abun, aes(x = variable, y = value, fill = variable)) +  # Add 'fill' to color the boxes
geom_boxplot() +
theme_minimal() +
scale_x_discrete(limits = orden_abun, labels = xLabels) +
ylab("Percentage within the TME") +
theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1),
axis.title.x = element_blank(),
panel.grid = element_blank(),
legend.position = "none") +  # Remove grid lines
scale_fill_brewer(palette = "Set3")
TAM_boxplots<-ggplot(gg_Only_TAM_abun, aes(x = variable, y = value, fill = variable)) +  # Add 'fill' to color the boxes
geom_boxplot() +
theme_minimal() +
scale_x_discrete(limits = orden_abun, labels = xLabels) +
ylab("Percentage within the TME") +
theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1),
axis.title.x = element_blank(),
panel.grid = element_blank(),
legend.position = "none") +  # Remove grid lines
scale_fill_brewer(palette = "Set3")
dev.off()
TME_estim_boxes
TAM_coex_patients
TAM_boxplots
# Percentages in the TME
TME_estim_boxes<-ggplot(df_long, aes(x = Var2, y = value, fill=Var2)) +
geom_boxplot()+
#Orden eje x
theme_minimal()+
scale_x_discrete(limits=sorted_medinas)+
labs(title="Cell type abundance in TME")+
theme(axis.text.x = element_text(angle = 45,hjust=1, vjust=1),
axis.title = element_blank(),
panel.grid = element_blank(),
legend.position = "none") +  # Remove grid lines
scale_fill_brewer(palette = "Set3")
#
# ============================================================================
# CORRELATIONS AMONG TME CELL TYPES
# ============================================================================
#CORRELATION MATRIX
# All population (Only those with enough abundance)
library(Hmisc)
res<-rcorr(BP.theta)
# Perform hierarchical clustering
dist_matrix <- as.dist(1 - res$r)  # Convert correlation to distance
hclust_res <- hclust(dist_matrix, method = "complete")  # Hierarchical clustering
# Reorder the correlation matrix based on the clustering
ordered_r <- res$r[hclust_res$order, hclust_res$order]
# Convert the ordered correlation matrix to long format
cor_data <- reshape2::melt(ordered_r)
# Plot using ggplot2 with hierarchical clustering
ggplot(cor_data, aes(Var1, Var2, fill = value)) +
geom_tile(color = "white") +
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Correlation") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1),
axis.text.y = element_text(hjust = 1),
axis.title = element_blank()) +
coord_fixed()
# Plot using ggplot2 with hierarchical clustering
celltype_corr_matrix<-ggplot(cor_data, aes(Var1, Var2, fill = value)) +
geom_tile(color = "white") +
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Correlation") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1),
axis.text.y = element_text(hjust = 1),
axis.title = element_blank()) +
coord_fixed()
