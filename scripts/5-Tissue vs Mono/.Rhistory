Shared_States
table(NewIdents)
Shared_States
length(Shared_States)
# Setting idents for plotting
NewIdents<-c(rep("Monocyte-like",length(Monos)),
rep("Tissue macrophage-like",length(Residentes)),
rep("Shared states", length(Shared_States)))
table(NewIdents)
c(Monos,Residentes, Shared_States)
# Setting idents for plotting
NewIdents<-c(rep("Monocyte-like",length(Monos)),
rep("Tissue macrophage-like",length(Residentes)),
rep("Shared states", length(Shared_States)))
MonocitResident <- SetIdent(TAM_Modules, cells = c(Monos,Residentes, Shared_States),
value = NewIdents)
table(Idents(MonocitResident))
dim(MonocitResident)
8581-2326-3676-1529
# Removing other phenotypes for cleaner visualization
MonocitResident<-subset(MonocitResident,
idents = c("Monocyte-like","Tissue macrophage-like","Shared states"))
DimPlot(MonocitResident)
# Setting idents for plotting
NewIdents <- c(rep("Monocyte-like (FCN1, ISG15, CXCL9)",length(Monos)),
rep("Tissue macrophage-like (HSPs, C1QA, APOE)",length(Residentes)),
rep("Shared states (FOSB, HLA-II)", length(Shared_States)))
MonocitResident <- SetIdent(TAM_Modules, cells = c(Monos,Residentes, Shared_States),
value = NewIdents)
# Removing other phenotypes for cleaner visualization
MonocitResident<-subset(MonocitResident,
idents = c("Monocyte-like","Tissue macrophage-like","Shared states"))
# Removing other phenotypes for cleaner visualization
MonocitResident<-subset(MonocitResident,
idents = c("Monocyte-like (FCN1, ISG15, CXCL9)",
"Tissue macrophage-like (HSPs, C1QA, APOE)",
"Shared states (FOSB, HLA-II)"))
DimPlot(MonocitResident)+
theme(legend.position = "bottom")
DimPlot(MonocitResident)+
theme(legend.position = "bottom")+
guides(color=guide_legend(ncol=1, byrow=TRUE,
#Circle size
override.aes = list(size=2.5)))
Plot_MonRes <- DimPlot(MonocitResident)+
theme(legend.position = "bottom")+
guides(color=guide_legend(ncol=1, byrow=TRUE,
#Circle size
override.aes = list(size=2.5)))
single.modules <- c("FCN1","ISG15","CXCL9","FOSB","HSPs","HLA_II","C1QA","APOE")
single.modules
#
# ============================================================================
# FIGURE 4b: MARKERS
# ============================================================================
Poles <- subset(TAM_Modules, idents = single.modules)
# RNA must be default assay.AverageExpression is applied to default assay
DefaultAssay(Poles)<-"RNA"
cluster.averages <- AverageExpression(Poles, return.seurat=T,slot = "data")
# Setting order
Idents(cluster.averages)<-factor(as.character(Idents(cluster.averages)),
levels = single.modules)
DoHeatmap(cluster.averages, features = Sub_Panel,
draw.lines = F,size = 3, angle = 0, hjust = 0.5,
group.colors = color_order)+
guides(colour="none")
DoHeatmap(cluster.averages, features = c("FOLR2","LYVE1","MAF","MERTK",
"CD14","FCGR3A","S100A8","S100A9",
"FCN1","VCAN","CCR2"),
draw.lines = F,size = 3, angle = 0, hjust = 0.5,
group.colors = color_order)+
guides(colour="none")
DoHeatmap(cluster.averages, features = c("FOLR2","LYVE1","MAF","MERTK",
"CD14","FCGR3A","S100A8","S100A9",
"FCN1","VCAN","CCR2"),
draw.lines = F,size = 3, angle = 0, hjust = 0.5,
#group.colors = color_order
)+
guides(colour="none")
DoHeatmap(Poles, features = c("FOLR2","LYVE1","MAF","MERTK",
"CD14","FCGR3A","S100A8","S100A9",
"FCN1","VCAN","CCR2"),assay = "RNA",slot = "data")
DoHeatmap(Poles, features = c("FOLR2","LYVE1","MAF","MERTK",
"CD14","FCGR3A","S100A8","S100A9",
"FCN1","VCAN","CCR2"),assay = "RNA",slot = "data")+scale_fill_gradientn(colours = reds)
DoHeatmap(cluster.averages, features = c("FOLR2","LYVE1","MAF","MERTK",
"CD14","FCGR3A","S100A8","S100A9",
"FCN1","VCAN","CCR2"),
draw.lines = F,size = 3, angle = 0, hjust = 0.5,
#group.colors = color_order
)+
guides(colour="none")+
scale_fill_gradientn(colours = reds)
VlnPlot(TAM_Modules, features = c("FOLR2","LYVE1","MAF","MERTK",
"CD14","FCGR3A","S100A8","S100A9",
"FCN1","VCAN","CCR2"), assay = "RNA",slot = "data")
VlnPlot(Poles, features = c("FOLR2","LYVE1","MAF","MERTK",
"CD14","FCGR3A","S100A8","S100A9",
"FCN1","VCAN","CCR2"), assay = "RNA",slot = "data")
FeaturePlot(TAM_Modules, features = c("FOLR2","LYVE1","MAF","MERTK",
"CD14","FCGR3A","S100A8","S100A9",
"FCN1","VCAN","CCR2"), cols = reds, slot = "data")
FeaturePlot(Poles, features = c("FOLR2","LYVE1","MAF","MERTK",
"CD14","FCGR3A","S100A8","S100A9",
"FCN1","VCAN","CCR2"), cols = reds, slot = "data")
#
# ============================================================================
# FIGURE 4b: MARKERS
# ============================================================================
Poles <- subset(TAM_Modules, idents = single.modules)
# Setting order
Idents(Poles)<-factor(as.character(Idents(Poles)),
levels = single.modules)
# RNA must be default assay.AverageExpression is applied to default assay
DefaultAssay(Poles)<-"RNA"
cluster.averages <- AverageExpression(Poles, return.seurat=T,slot = "data")
DoHeatmap(cluster.averages, features = c("FOLR2","LYVE1","MAF","MERTK",
"CD14","FCGR3A",
"S100A8","S100A9","FCN1","VCAN"),
draw.lines = F,size = 3, angle = 0, hjust = 0.5,
#group.colors = color_order
)+
guides(colour="none")+
scale_fill_gradientn(colours = reds)
DoHeatmap(Polos, features = c("FOLR2","LYVE1","MAF","MERTK",
"CD14","FCGR3A",
"S100A8","S100A9","FCN1","VCAN"),
assay = "RNA", slot = "data",
#group.colors = Farben,
#Text above the bar
size = 3.2,angle = 0,hjust = 0.5)+
#Paleta de colores
scale_fill_gradientn(colours = reds)+
theme(axis.text.y = element_text(size = rel(0.6)))+
guides(colour="none")
DoHeatmap(Poles, features = c("FOLR2","LYVE1","MAF","MERTK",
"CD14","FCGR3A",
"S100A8","S100A9","FCN1","VCAN"),
assay = "RNA", slot = "data",
#group.colors = Farben,
#Text above the bar
size = 3.2,angle = 0,hjust = 0.5)+
#Paleta de colores
scale_fill_gradientn(colours = reds)+
theme(axis.text.y = element_text(size = rel(0.6)))+
guides(colour="none")
VlnPlot(Poles, features = c("FOLR2","LYVE1","MAF","MERTK",
"CD14","FCGR3A",
"S100A8","S100A9","FCN1","VCAN"),assay = "RNA",slot = "data")
VlnPlot(Poles, features = c("FOLR2","LYVE1","MAF","MERTK",
"CD14","FCGR3A",
"S100A8","S100A9","FCN1","VCAN"),assay = "RNA",slot = "data", pt.size = 0)
DoHeatmap(Poles, features = c("FOLR2","LYVE1","MAF","MERTK",
"CD14","FCGR3A",
"S100A8","FCN1"),
assay = "RNA", slot = "data",
#Text above the bar
size = 3.2,angle = 30,hjust = 0.5)+
#Paleta de colores
scale_fill_gradientn(colours = reds)+
theme(axis.text.y = element_text(size = rel(0.6)))+
guides(colour="none")
library(ggplot2)
#Funcion para marcar punto medio del violin
median.stat <- function(x){
out <- quantile(x, probs = c(0.5))
names(out) <- c("ymed")
return(out)
}
# Were to store violin plots
vln_list<-list()
TissMonoMarkers <- c("FOLR2","LYVE1","MAF","MERTK",
"CD14","FCGR3A","S100A8","FCN1")
for (ii in seq_along(TissMonoMarkers)) {
vln_list[[ii]]<-VlnPlot(Poles, features = TissMonoMarkers[ii], pt.size=0)+
NoLegend() +
labs(title = TissMonoMarkers[ii])+
ylab("Normalized expression")+
# More limit to add significant comparisons
theme(axis.text.y = element_text(size = rel(0.7)),
axis.text.x = element_text(size = rel(0.8)),
#El texto horizontal
axis.title.y = element_text(size = rel(0.8)),
axis.title.x = element_blank(),
plot.title = element_text(size = rel(0.8), family = "serif"),
# Reduce space between plots
plot.margin=unit(c(-0.5,-0.5,-0.5,0.5), "cm"))+
# Add point at median
stat_summary(fun = median.stat, geom='point', size = 1, colour = "black")
#Loop tracking
print(paste("Loop",ii, sep = " "))
}
# Plot array
ggpubr::ggarrange(plotlist = vln_list, ncol=4, nrow = 2)
single.modules <- c("FCN1","ISG15","CXCL9","FOSB","HLA_II","HSPs","C1QA","APOE")
#
# ============================================================================
# FIGURE 4b: MARKERS
# ============================================================================
Poles <- subset(TAM_Modules, idents = single.modules)
# Setting order
Idents(Poles)<-factor(as.character(Idents(Poles)),
levels = single.modules)
# Were to store violin plots
vln_list<-list()
TissMonoMarkers <- c("FOLR2","LYVE1","MAF","MERTK",
"CD14","FCGR3A","S100A8","FCN1")
for (ii in seq_along(TissMonoMarkers)) {
vln_list[[ii]]<-VlnPlot(Poles, features = TissMonoMarkers[ii], pt.size=0)+
NoLegend() +
labs(title = TissMonoMarkers[ii])+
ylab("Normalized expression")+
# More limit to add significant comparisons
theme(axis.text.y = element_text(size = rel(0.7)),
axis.text.x = element_text(size = rel(0.8)),
#El texto horizontal
axis.title.y = element_text(size = rel(0.8)),
axis.title.x = element_blank(),
plot.title = element_text(size = rel(0.8), family = "serif"),
# Reduce space between plots
plot.margin=unit(c(-0.5,-0.5,-0.5,0.5), "cm"))
#Loop tracking
print(paste("Loop",ii, sep = " "))
}
# Plot array
ggpubr::ggarrange(plotlist = vln_list, ncol=4, nrow = 2)
for (ii in seq_along(TissMonoMarkers)) {
vln_list[[ii]]<-VlnPlot(Poles, features = TissMonoMarkers[ii], pt.size=0,
assay = "RNA",slot = "RNA")+
NoLegend() +
labs(title = TissMonoMarkers[ii])+
ylab("Normalized expression")+
# More limit to add significant comparisons
theme(axis.text.y = element_text(size = rel(0.7)),
axis.text.x = element_text(size = rel(0.8)),
#El texto horizontal
axis.title.y = element_text(size = rel(0.8)),
axis.title.x = element_blank(),
plot.title = element_text(size = rel(0.8), family = "serif"),
# Reduce space between plots
plot.margin=unit(c(-0.5,-0.5,-0.5,0.5), "cm"))
#Loop tracking
print(paste("Loop",ii, sep = " "))
}
for (ii in seq_along(TissMonoMarkers)) {
vln_list[[ii]]<-VlnPlot(Poles, features = TissMonoMarkers[ii], pt.size=0,
assay = "RNA",slot = "data")+
NoLegend() +
labs(title = TissMonoMarkers[ii])+
ylab("Normalized expression")+
# More limit to add significant comparisons
theme(axis.text.y = element_text(size = rel(0.7)),
axis.text.x = element_text(size = rel(0.8)),
#El texto horizontal
axis.title.y = element_text(size = rel(0.8)),
axis.title.x = element_blank(),
plot.title = element_text(size = rel(0.8), family = "serif"),
# Reduce space between plots
plot.margin=unit(c(-0.5,-0.5,-0.5,0.5), "cm"))
#Loop tracking
print(paste("Loop",ii, sep = " "))
}
# Plot array
ggpubr::ggarrange(plotlist = vln_list, ncol=4, nrow = 2)
DoHeatmap(Poles, features = c("FOLR2","LYVE1","MAF","MERTK",
"CD14","FCGR3A","S100A8","FCN1"),
assay = "RNA", slot = "data",
#Text above the bar
size = 3.2,angle = 30,hjust = 0.5)+
#Paleta de colores
scale_fill_gradientn(colours = reds)+
theme(axis.text.y = element_text(size = rel(0.6)))+
guides(colour="none")
dev.off()
# Plot array
TissMono_Plot <- ggpubr::ggarrange(plotlist = vln_list, ncol=4, nrow = 2)
#
# ============================================================================
# FIGURE 4c: INFLAMATORY vs REPAIR
# ============================================================================
TAM_Paths<-readRDS(file = "D:/R_ScriptsPaper/Objects/Temporal/WuTAM_GSEApaths_HSPs.rds")
# List of pathways of interest
CustomPaths<-readRDS(file = "D:/R_ScriptsPaper/Objects/Temporal/CustomPaths_HSP.rds")
# Selecting ES of path of interest
#ES_PATH_DF<-TAM_Paths@meta.data[,names(CustomPaths)]
# Custom names
names(CustomPaths)<-c("GOBP_NFkB activity","GOBP_Antimicrobial response","MSigDB_Angiogenesis",
"GOBP_Aniviral response","MSigDB_INF alpha","MSigDB_INF gamma",
"MSiDB_IL6/JAK/STAT3 signaling","GOBP_INF gamma response",
"GOBP_Cell stress","GOBP_Heat shock","MSigDB_MAPK",
"GOBP_Antigen presentation","KEGG_Complement",
"GOBP_Clathrin dependent endocytosis","GOBP_TGFB signaling",
"GOBP_Endocytosis","GOBP_Steroid metabolism","GOBP_Lipid metabolism",
"MSigDB_Adipogenesis")
unique(unlist(CustomPaths[1:3]))
names(CustomPaths[1:3])
CustomPaths[3]
#
# ============================================================================
# INFLAMATORY vs REPAIR
# ============================================================================
UNI<-readRDS(file = "D:/R_ScriptsPaper/Objects/Temporal/HSPs_UNI.rds")
str(UNI)
lengt(UNI)
length(UNI)
names(CustomPaths)
names(UNI)
grep("WOUNDING|ENDOCYTOSIS|TRANSFORMING|DIFFERENTIATION",names(UNI))
UNI[grep("WOUNDING|ENDOCYTOSIS|TRANSFORMING|DIFFERENTIATION",names(UNI))]
UNI[grep("WOUNDING|ENDOCYTOSIS|TRANSFORMING|DIFFERENTIATION",names(UNI))]
# Tissue repair
repair_patterns <- "WOUNDING|ENDOCYTOSIS|TRANSFORMING|DIFFERENTIATION|COAGULATION|LYSOSOME"
unique(unlist(UNI[grep(repair_patterns,names(UNI))]))
UNI[grep(repair_patterns,names(UNI))]
Repair <- unique(unlist(UNI[grep(repair_patterns,names(UNI))]))
table(UNI$KEGG_LYSOSOME%in%Repair)
immune_patterns <- "HUMORAL|KAPPAB|MAP KINASE|"
unique(unlist(UNI[grep(immune_patterns,names(UNI))]))
lengths(UNI[grep(immune_patterns,names(UNI))])
immune_patterns <- "HUMORAL|KAPPAB|MAP KINASE"
unique(unlist(UNI[grep(immune_patterns,names(UNI))]))
unique(unlist(UNI[grep(immune_patterns,names(UNI))]))
immune_patterns <- "HUMORAL|KAPPAB|MAP KINASE|VIRAL|INTERFERON"
unique(unlist(UNI[grep(immune_patterns,names(UNI))]))
Immune <- unique(unlist(UNI[grep(immune_patterns,names(UNI))]))
Repair <- unique(unlist(UNI[grep(repair_patterns,names(UNI))]))
Resum<-list(Immune, Repair)
names(Resum)<-c("Immune_Response","Tissue_Repair")
hasty<-AddModuleScore(TAM_Modules, features = Resum, assay = "RNA", name = names(Resum))
#Remoce number from metadata colnames
colnames(hasty@meta.data)<-ifelse(grepl("Immun|IFN|Repair",colnames(hasty@meta.data)),
stringr::str_remove_all(colnames(hasty@meta.data),"[0-9]"),
colnames(hasty@meta.data))
head(hasty)
FeaturePlot(hasty, features = names(Resum), cols = reds)
IFN_Res <- unique(unlist(UNI[grep("VIRAL|INTERFERON",names(UNI))]))
Immune <- unique(unlist(UNI[grep("HUMORAL|KAPPAB|MAP KINASE",names(UNI))]))
Resum<-list(Immune, IFN_Res, Repair)
names(Resum)<-c("Immune_Response","IFN_Response","Tissue_Repair")
rm(hasty)
hasty<-AddModuleScore(TAM_Modules, features = Resum, assay = "RNA", name = names(Resum))
#Remove number from metadata colnames
colnames(hasty@meta.data)<-ifelse(grepl("Immun|IFN|Repair",colnames(hasty@meta.data)),
stringr::str_remove_all(colnames(hasty@meta.data),"[0-9]"),
colnames(hasty@meta.data))
FeaturePlot(hasty, features = names(Resum), cols = reds)
rm(TAM_Paths)
#Enrichment of customized signatures
TAM.Infl_Repar<-AddModuleScore(TAM_Modules, features = Resum, assay = "RNA", name = names(Resum))
Resum<-list(Immune, IFN_Res, Repair)
names(Resum)<-c("Immune response","IFN response","Tissue repair")
#Enrichment of customized signatures
TAM.Infl_Repar<-AddModuleScore(TAM_Modules, features = Resum, assay = "RNA", name = names(Resum))
colnames(TAM.Infl_Repar@meta.data)<-ifelse(grepl("Immun|IFN|Repair",colnames(TAM.Infl_Repar@meta.data)),
stringr::str_remove_all(colnames(TAM.Infl_Repar@meta.data),"[0-9]"),
colnames(TAM.Infl_Repar@meta.data))
Resum<-list(Immune, IFN_Res, Repair)
names(Resum)<-c("Immune response","IFN response","Tissue repair")
#Enrichment of customized signatures
TAM.Infl_Repar<-AddModuleScore(TAM_Modules, features = Resum, assay = "RNA", name = names(Resum))
names(Resum)<-c("Immune_response","IFN_response","Tissue_repair")
#Enrichment of customized signatures
TAM.Infl_Repar<-AddModuleScore(TAM_Modules, features = Resum, assay = "RNA", name = names(Resum))
colnames(TAM.Infl_Repar@meta.data)<-ifelse(grepl("Immun|IFN|repair",colnames(TAM.Infl_Repar@meta.data)),
stringr::str_remove_all(colnames(TAM.Infl_Repar@meta.data),"[0-9]"),
colnames(TAM.Infl_Repar@meta.data))
plot.list<-list()
for (ii in seq_along(Resum)) {
# Modify the title by replacing "_" with a space
plot_title <- gsub("_", " ", names(Resum)[ii])
# Create the plot
plot.list[[i]] <- FeaturePlot(WuTAMs, features = names(Resum)[ii], cols = reds) +
labs(title = plot_title) +
NoLegend() +
theme(
axis.title = element_text(size = 6),
axis.text = element_text(size = 6),
plot.title = element_text(hjust = 0.5, size = rel(0.7))
)
}
plot.list<-list()
for (ii in seq_along(Resum)) {
# Modify the title by replacing "_" with a space
plot_title <- gsub("_", " ", names(Resum)[ii])
# Create the plot
plot.list[[i]] <- FeaturePlot(TAM.Infl_Repar, features = names(Resum)[ii], cols = reds) +
labs(title = plot_title) +
NoLegend() +
theme(
axis.title = element_text(size = 6),
axis.text = element_text(size = 6),
plot.title = element_text(hjust = 0.5, size = rel(0.7))
)
}
ggpubr::ggarrange(plotlist = plot.list, ncol=2,
common.legend = TRUE, legend = "right")
plot.list<-list()
for (ii in seq_along(Resum)) {
# Modify the title by replacing "_" with a space
plot_title <- gsub("_", " ", names(Resum)[ii])
# Create the plot
plot.list[[ii]] <- FeaturePlot(TAM.Infl_Repar, features = names(Resum)[ii], cols = reds) +
labs(title = plot_title) +
NoLegend() +
theme(
axis.title = element_text(size = 6),
axis.text = element_text(size = 6),
plot.title = element_text(hjust = 0.5, size = rel(0.7))
)
}
ggpubr::ggarrange(plotlist = plot.list, ncol=2,
common.legend = TRUE, legend = "right")
ggpubr::ggarrange(plotlist = plot.list, ncol=2, nrow = 2,
common.legend = TRUE, legend = "right")
names(Resum)<-c("Immune_activation","IFN_response","Tissue_repair")
#Enrichment of customized signatures
TAM.Infl_Repar<-AddModuleScore(TAM_Modules, features = Resum, assay = "RNA", name = names(Resum))
#Removing names from score names
colnames(TAM.Infl_Repar@meta.data)<-ifelse(grepl("Immun|IFN|repair",colnames(TAM.Infl_Repar@meta.data)),
stringr::str_remove_all(colnames(TAM.Infl_Repar@meta.data),"[0-9]"),
colnames(TAM.Infl_Repar@meta.data))
plot.list<-list()
for (ii in seq_along(Resum)) {
# Modify the title by replacing "_" with a space
plot_title <- gsub("_", " ", names(Resum)[ii])
# Create the plot
plot.list[[ii]] <- FeaturePlot(TAM.Infl_Repar, features = names(Resum)[ii], cols = reds) +
labs(title = plot_title) +
NoLegend() +
theme(
axis.title = element_text(size = 6),
axis.text = element_text(size = 6),
plot.title = element_text(hjust = 0.5, size = rel(0.7))
)
}
plot_Inf_Repair<-ggpubr::ggarrange(plotlist = plot.list, ncol=2, nrow = 2,
common.legend = TRUE, legend = "right")
TissMono_Plot
dev.off()
#
# ============================================================================
# FIGURE 4d: M1/M2 SCORES
# ============================================================================
CompleteMarkerDF<-readRDS(file = "D:/R_Scripts/EssentialObjects/CompleteMarkerDF.rds")
head(CompleteMarkerDF)
View(CompleteMarkerDF)
CompleteMarkerDF$Marker[CompleteMarkerDF$`Curated M1`|CompleteMarkerDF$`Curated M2`]
#Marker curated from literature
pre_M1 <- CompleteMarkerDF$Marker[CompleteMarkerDF$`Curated M1`]
pre_M2 <- CompleteMarkerDF$Marker[CompleteMarkerDF$`Curated M2`]
pre_M1
pre_M2
pre_M2["IL10"]
pre_M2[pre_M2%in%"IL10"]
pre_M2[pre_M2%in%"CLEC7A"]
pre_M2[pre_M2%in%"CCL17"]
pre_M2[pre_M2%in%"CCL22"]
pre_M2[pre_M2%in%c("CCL22","CCL24","CTSA","CTSD","CSF1R","PLAU","RETNLB")]
#Importing signature to test
file_path<-"D:/Antecedentes y teoría/Macrofagos/M1_M2/1-Tabla definitica Referencias M1 M2.xlsx"
pre_M1 <- readxl::read_excel(file_path,
sheet = "M1 markers",
range = "A2:A22", col_names = TRUE)
pre_M1
class(pre_M1)
as.vector(pre_M1)
pre_M1 <- readxl::read_excel(file_path,
sheet = "M1 markers",
range = "A2:A22", col_names = F)
pre_M1
as.vector(pre_M1)
pre_M1 <- readxl::read_excel(file_path,
sheet = "M1 markers",
range = "A1:A22", col_names = T)
pre_M1$`M1 marker`
pre_M2 <- readxl::read_excel(file_path,
sheet = "M2 markers",
range = "A1:C32", col_names = T)
head(pre_M2)
pre_M2$`Reference (DOI)`
!is.na(pre_M2$`Reference (DOI)`)
pre_M2$`M2 marker`[!is.na(pre_M2$`Reference (DOI)`)]
pre_M2 <- readxl::read_excel(file_path,
sheet = "M2 markers",
range = "A1:C34", col_names = T)
pre_M1
pre_M1$`M1 marker`
M1_M2 <- list(
M1_Curated = pre_M1$`M1 marker`,
M2_Curated = pre_M2$`M2 marker`[!is.na(pre_M2$`Reference (DOI)`)]
)
str(M1_M2)
str(M1_M2)
datExpr<-GetAssayData(TAM_Modules, assay = "RNA", slot = "data")
#Removing mitochondrial, Ribosomal and ORF genes
bad_patterns <- 'RP[0-9]|^MT|[0-9][0-9][0-9][0-9]|^RPL|^RPS|[0-9]orf[0-9]|^ATP'
a <- rownames(datExpr)[!grepl(bad_patterns, rownames(datExpr))]
datExpr<-datExpr[a,]
#Remove genes expressed in less than 5% of TAMs
datExpr<-datExpr[rowSums(datExpr == 0)/ncol(datExpr)<0.95,]
#Asses enrichment score with GSVA
library(GSVA)
M1M2.Enrichment<-as.data.frame(gsva(datExpr,M1_M2,method="gsva",parallel.sz=1))
#Agregando identidades a metadata
library(dplyr)
DF_enrich<-as.data.frame(t(M1M2.Enrichment))
# Modifying colnames
colnames(DF_enrich)<-paste0(colnames(DF_enrich), "_score")
# Saving results
saveRDS(DF_enrich, file = "D:/R_ScriptsPaper/Objects/Temporal/ES_M1M2_WuTAMs.rds")
head(DF_enrich)
dim(DF_enrich)
